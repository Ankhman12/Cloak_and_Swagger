//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Operator Action Map"",
            ""id"": ""878db08d-10f4-4a72-a701-a2c82730dc72"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""34fe8306-7ca4-4615-8940-3cc5e4388634"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""fb95623c-2f51-433c-8409-09f95ff08f69"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""35ed7540-fb78-4b89-b949-ce1a54a77dcc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""5ecabe38-6edb-4232-92f2-cc3007a86e8a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""4c10a054-e08d-4e7d-b4eb-60f77e4714f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grapple"",
                    ""type"": ""Button"",
                    ""id"": ""bca4561d-36aa-4b84-8298-3365d5882479"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6226a84b-6856-4845-894e-4bda7e2a6614"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60408d02-5d29-4fd1-9657-bfa5127b5fa9"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe638cee-eaa4-4401-9a50-1a2abd219fac"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""523d7861-39cc-4ba7-a085-18c59725cdcf"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""acf7ac9d-bd8e-4f32-af2e-3315eef6f0a7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""42d622cd-82c1-45e9-a184-dde6d600e1a8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""aab270d1-288f-490c-8546-f0de388f34f5"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""959638a9-dd0a-4b55-aaf3-f9dba0d20877"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af4630f7-4538-4c6a-85d2-0878ac26ae93"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grapple"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Operator Action Map
        m_OperatorActionMap = asset.FindActionMap("Operator Action Map", throwIfNotFound: true);
        m_OperatorActionMap_Jump = m_OperatorActionMap.FindAction("Jump", throwIfNotFound: true);
        m_OperatorActionMap_Crouch = m_OperatorActionMap.FindAction("Crouch", throwIfNotFound: true);
        m_OperatorActionMap_Sprint = m_OperatorActionMap.FindAction("Sprint", throwIfNotFound: true);
        m_OperatorActionMap_Movement = m_OperatorActionMap.FindAction("Movement", throwIfNotFound: true);
        m_OperatorActionMap_Interact = m_OperatorActionMap.FindAction("Interact", throwIfNotFound: true);
        m_OperatorActionMap_Grapple = m_OperatorActionMap.FindAction("Grapple", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Operator Action Map
    private readonly InputActionMap m_OperatorActionMap;
    private IOperatorActionMapActions m_OperatorActionMapActionsCallbackInterface;
    private readonly InputAction m_OperatorActionMap_Jump;
    private readonly InputAction m_OperatorActionMap_Crouch;
    private readonly InputAction m_OperatorActionMap_Sprint;
    private readonly InputAction m_OperatorActionMap_Movement;
    private readonly InputAction m_OperatorActionMap_Interact;
    private readonly InputAction m_OperatorActionMap_Grapple;
    public struct OperatorActionMapActions
    {
        private @Controls m_Wrapper;
        public OperatorActionMapActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_OperatorActionMap_Jump;
        public InputAction @Crouch => m_Wrapper.m_OperatorActionMap_Crouch;
        public InputAction @Sprint => m_Wrapper.m_OperatorActionMap_Sprint;
        public InputAction @Movement => m_Wrapper.m_OperatorActionMap_Movement;
        public InputAction @Interact => m_Wrapper.m_OperatorActionMap_Interact;
        public InputAction @Grapple => m_Wrapper.m_OperatorActionMap_Grapple;
        public InputActionMap Get() { return m_Wrapper.m_OperatorActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OperatorActionMapActions set) { return set.Get(); }
        public void SetCallbacks(IOperatorActionMapActions instance)
        {
            if (m_Wrapper.m_OperatorActionMapActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_OperatorActionMapActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_OperatorActionMapActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_OperatorActionMapActionsCallbackInterface.OnJump;
                @Crouch.started -= m_Wrapper.m_OperatorActionMapActionsCallbackInterface.OnCrouch;
                @Crouch.performed -= m_Wrapper.m_OperatorActionMapActionsCallbackInterface.OnCrouch;
                @Crouch.canceled -= m_Wrapper.m_OperatorActionMapActionsCallbackInterface.OnCrouch;
                @Sprint.started -= m_Wrapper.m_OperatorActionMapActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_OperatorActionMapActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_OperatorActionMapActionsCallbackInterface.OnSprint;
                @Movement.started -= m_Wrapper.m_OperatorActionMapActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_OperatorActionMapActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_OperatorActionMapActionsCallbackInterface.OnMovement;
                @Interact.started -= m_Wrapper.m_OperatorActionMapActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_OperatorActionMapActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_OperatorActionMapActionsCallbackInterface.OnInteract;
                @Grapple.started -= m_Wrapper.m_OperatorActionMapActionsCallbackInterface.OnGrapple;
                @Grapple.performed -= m_Wrapper.m_OperatorActionMapActionsCallbackInterface.OnGrapple;
                @Grapple.canceled -= m_Wrapper.m_OperatorActionMapActionsCallbackInterface.OnGrapple;
            }
            m_Wrapper.m_OperatorActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Grapple.started += instance.OnGrapple;
                @Grapple.performed += instance.OnGrapple;
                @Grapple.canceled += instance.OnGrapple;
            }
        }
    }
    public OperatorActionMapActions @OperatorActionMap => new OperatorActionMapActions(this);
    public interface IOperatorActionMapActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnGrapple(InputAction.CallbackContext context);
    }
}
